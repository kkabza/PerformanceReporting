---
description: Ensures proper environment variable configuration and usage
globs: [".env*", "**/*.py", "app/config.py"]
alwaysApply: true
---

# Environment Configuration Best Practices

id: environment-configuration
title: Environment Variable Configuration and Usage
trigger:
  files:
    - ".env*"
    - "app/config.py"
    - "**/*.py"
description: |
  Proper environment variable handling is critical for application security, configuration, and cross-environment compatibility.
criteria:
  - Use .env files for local development with .env.example as a template
  - Load environment variables through a centralized config module
  - Provide sensible defaults for non-sensitive variables
  - Use os.getenv() with a default value instead of direct access
  - Mask sensitive values like API keys when logging or displaying
examples:
  good:
    - |
      # Central configuration with defaults and masking
      import os
      
      # Centralized config
      DB_URL = os.getenv('DATABASE_URL', 'sqlite:///dev.db')
      API_KEY = os.getenv('API_KEY', '')
      DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
      
      # Masked display for sensitive values
      def get_masked_api_key():
          return "•" * (len(API_KEY) - 4) + API_KEY[-4:] if API_KEY else 'Not set'
    
    - |
      # Proper check if env var exists
      if not API_KEY:
          logger.warning("API_KEY not set - certain features will be disabled")
  bad:
    - |
      # Direct dictionary access without checks
      import os
      
      # Will raise KeyError if not set
      DB_URL = os.environ['DATABASE_URL']
      API_KEY = os.environ['API_KEY']
    
    - |
      # Hardcoding sensitive values
      API_KEY = "ac76f5a1b6f84ef9b9506a0336e22b56"
      DB_PASSWORD = "admin123"  # Never hardcode credentials
severity: error
fix_suggestion: |
  Use environment variables properly with defaults and validation:
  
  ```python
  import os
  from dotenv import load_dotenv
  
  # Load from .env file in development
  load_dotenv()
  
  # Safe access with defaults
  DB_URL = os.getenv('DATABASE_URL', 'sqlite:///dev.db')
  API_KEY = os.getenv('API_KEY', '')
  DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
  
  # Validation and warnings
  if not API_KEY and not DEBUG:
      logger.warning("API_KEY not set in production environment")
      
  # Masking for logs/display
  def get_masked_value(value):
      if not value:
          return "Not set"
      return "•" * (len(value) - 4) + value[-4:] if len(value) > 4 else "•" * len(value)
  ```

## Problem
Improper environment variable handling can lead to:
- Security vulnerabilities through exposed secrets
- Configuration drift between environments
- Hard-to-debug issues when variables are missing
- Difficulty in local development setup

## Solution
Follow these guidelines for environment variables:

### ✅ Correct Practices
- Use `.env` files for local development with `.env.example` as a template
- Load environment variables through a centralized config module
- Provide sensible defaults for non-sensitive variables
- Use `os.getenv()` with a default value instead of direct access
- Mask sensitive values like API keys when logging or displaying

### ❌ Incorrect Practices
- Hardcoding sensitive values like API keys or passwords
- Using `os.environ[]` without checking if the key exists
- Storing real credentials in source control
- Missing documentation on required environment variables

## Example
```python
# Good example
import os

# Centralized config
DB_URL = os.getenv('DATABASE_URL', 'sqlite:///dev.db')
API_KEY = os.getenv('API_KEY', '')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# When using the values
if not API_KEY:
    logger.warning("API_KEY not set - certain features will be disabled")

# When displaying masked values
api_key_masked = "•" * len(API_KEY) if API_KEY else ''
```

## Impact
- **Severity**: High - affects security and functionality
- **Locations**: Configuration files, app initialization, and API routes
- **When**: During application startup and request handling 