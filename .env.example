# Flask Multi-Environment Template - Example Environment Variables
# Copy this file to .env.{environment} or use switch_env.py

# Application configuration
FLASK_APP=app.py
FLASK_APP_NAME="Flask Multi-Environment Template"
APP_DESCRIPTION="A template for Flask applications with multi-environment support"
FLASK_ENV=development  # development, production, or testing

# Security
SECRET_KEY=set-this-in-production-and-make-it-unique-per-environment
SECURITY_PASSWORD_SALT=set-this-in-production

# Build information
APP_VERSION=0.1.0
BUILD_VERSION=BUILD-20240101-example
GIT_HASH=

# Database connection
DATABASE_URL=sqlite:///instance/app.db
DEV_DATABASE_URL=sqlite:///instance/dev.db
TEST_DATABASE_URL=sqlite:///:memory:

# Redis cache and session (for production)
REDIS_URL=redis://localhost:6379/0

# Sentry error tracking
SENTRY_DSN=https://[key]@[organization].ingest.[region].sentry.io/[project]

# Application Insights
# Replace these with your Azure AD app details
AZURE_TENANT_ID="YOUR_TENANT_ID"
AZURE_CLIENT_ID="YOUR_CLIENT_ID"
AZURE_CLIENT_SECRET="YOUR_CLIENT_SECRET"

# Application Insights App ID
APP_INSIGHTS_APPLICATION_ID="b1a6e0c7-3049-45ef-8323-ef54fab6f5a2"

# OpenAI Configuration
OPENAI_API_ENDPOINT="https://api.openai.com/v1"
OPENAI_API_KEY="sk-your-api-key-here"
OPENAI_DEPLOYMENT="gpt-3.5-turbo"

# Logging
LOG_LEVEL=DEBUG  # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT=detailed  # simple, detailed, json

# Feature flags
FEATURE_DEBUG_TOOLBAR=true
FEATURE_DEMO_MODE=false 